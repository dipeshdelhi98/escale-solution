"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.multipartFileParser = void 0;
var busboy_1 = __importDefault(require("busboy"));
var allowedMethods = ['POST', 'PUT'];
var multipartFileParser = function (_a) {
    var _b = _a === void 0 ? {} : _a, fileOptions = _b.fileOptions, busboyOptions = _b.busboyOptions;
    return [
        function (req, res, next) {
            var type = req.headers['content-type'];
            if (allowedMethods.includes(req.method) && type && type.startsWith('multipart/form-data')) {
                var busboy = null;
                try {
                    busboy = new busboy_1.default(Object.assign({ headers: req.headers }, busboyOptions));
                }
                catch (err) {
                    next();
                    return;
                }
                req.files = [];
                busboy.on('field', function (fieldname, value) {
                    if (!req.body) {
                        req.body = {};
                    }
                    req.body[fieldname] = value;
                });
                busboy.on('file', function (fieldname, file, filename, encoding, mimetype) {
                    var fileBuffer = Buffer.from('');
                    file.on('data', function (data) {
                        fileBuffer = Buffer.concat([fileBuffer, data]);
                    });
                    file.on('end', function () {
                        var options = Object.assign({ allowedMimesTypes: [''] }, fileOptions);
                        if (!fileOptions || options.allowedMimesTypes.includes(mimetype)) {
                            req.files.push({
                                fieldname: fieldname,
                                originalname: filename,
                                encoding: encoding,
                                mimetype: mimetype,
                                buffer: fileBuffer,
                            });
                        }
                        else {
                            res.status(400).send('Invalid file type');
                        }
                    });
                });
                busboy.on('finish', function () {
                    next();
                });
                busboy.end(req.rawBody);
            }
            else {
                next();
            }
        },
    ];
};
exports.multipartFileParser = multipartFileParser;
exports.default = multipartFileParser();
